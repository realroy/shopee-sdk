import { GetOrderDetailResponse } from "@shopee-sdk/core";
type OrderDetail = NonNullable<GetOrderDetailResponse["response"]>["orderList"][number];
export declare function createOrderDetail(args?: Partial<OrderDetail>): {
    orderSn: string;
    region: string;
    currency: string;
    cod: true;
    totalAmount: number;
    orderStatus: "UNPAID" | "READY_TO_SHIP" | "RETRY_SHIP" | "IN_CANCEL" | "CANCELLED" | "PROCESSED" | "SHIPPED" | "TO_RETURN" | "TO_CONFIRM_RECEIVE" | "COMPLETED";
    shippingCarrier: string;
    paymentMethod: string;
    estimatedShippingFee: number;
    messageToSeller: string;
    createTime: number;
    updateTime: number;
    daysToShip: number;
    shipByDate: number;
    buyerUserId: number;
    buyerUsername: string;
    recipientAddress: {
        name: string;
        phone: string;
        town: string;
        district: string;
        city: string;
        state: string;
        region: string;
        zipcode: string;
        fullAddress: string;
    };
    actualShippingFee: number;
    goodsToDeclare: boolean;
    note: string;
    noteUpdateTime: number;
    itemList: never[];
    payTime: number;
    dropshipper: string;
    dropshipperPhone: string;
    splitUp: false;
    buyerCancelReason: string;
    cancelBy: string;
    cancelReason: string;
    actualShippingFeeConfirmed: false;
    buyerCpfId: string;
    fulfillmentFlag: string;
    pickupDoneTime: number;
    packageList: {
        packageNumber: string;
        logisticsStatus: string;
        shippingCarrier: string;
        itemList: {
            itemId: number;
            modelId: number;
            modelQuantity: number;
        }[];
        parcelChargeableWeightGram: number;
    }[];
    invoiceData: {
        number: string;
        seriesNumber: string;
        accessKey: string;
        issueDate: number;
        totalValue: number;
        productsTotalValue: number;
        taxCode: string;
    };
    checkoutShippingCarrier: string;
    reverseShippingFee: number;
    orderChargeableWeightGram: number;
    edtFrom: number;
    edtTo: number;
    prescriptionImages: never[];
    prescriptionCheckStatus: number;
};
export declare function createOrderList(n: number): {
    orderSn: string;
    region: string;
    currency: string;
    cod: true;
    totalAmount: number;
    orderStatus: "UNPAID" | "READY_TO_SHIP" | "RETRY_SHIP" | "IN_CANCEL" | "CANCELLED" | "PROCESSED" | "SHIPPED" | "TO_RETURN" | "TO_CONFIRM_RECEIVE" | "COMPLETED";
    shippingCarrier: string;
    paymentMethod: string;
    estimatedShippingFee: number;
    messageToSeller: string;
    createTime: number;
    updateTime: number;
    daysToShip: number;
    shipByDate: number;
    buyerUserId: number;
    buyerUsername: string;
    recipientAddress: {
        name: string;
        phone: string;
        town: string;
        district: string;
        city: string;
        state: string;
        region: string;
        zipcode: string;
        fullAddress: string;
    };
    actualShippingFee: number;
    goodsToDeclare: boolean;
    note: string;
    noteUpdateTime: number;
    itemList: never[];
    payTime: number;
    dropshipper: string;
    dropshipperPhone: string;
    splitUp: false;
    buyerCancelReason: string;
    cancelBy: string;
    cancelReason: string;
    actualShippingFeeConfirmed: false;
    buyerCpfId: string;
    fulfillmentFlag: string;
    pickupDoneTime: number;
    packageList: {
        packageNumber: string;
        logisticsStatus: string;
        shippingCarrier: string;
        itemList: {
            itemId: number;
            modelId: number;
            modelQuantity: number;
        }[];
        parcelChargeableWeightGram: number;
    }[];
    invoiceData: {
        number: string;
        seriesNumber: string;
        accessKey: string;
        issueDate: number;
        totalValue: number;
        productsTotalValue: number;
        taxCode: string;
    };
    checkoutShippingCarrier: string;
    reverseShippingFee: number;
    orderChargeableWeightGram: number;
    edtFrom: number;
    edtTo: number;
    prescriptionImages: never[];
    prescriptionCheckStatus: number;
}[];
export declare function createGetOrderDetailResponse(args?: Partial<GetOrderDetailResponse> & {
    orderSnList: string[];
}): {
    error: string | undefined;
    message: string | undefined;
    response: {
        orderList: {
            orderSn: string;
            region: string;
            note: string;
            dropshipper: string | null;
            cancelReason: string;
            itemList: {
                itemId: number;
                modelId: number;
                itemName: string;
                itemSku: string;
                modelName: string;
                modelSku: string;
                modelQuantityPurchased: number;
                modelOriginalPrice: number;
                modelDiscountedPrice: number;
                wholesale: boolean;
                weight: number;
                addOnDeal: boolean;
                mainItem: boolean;
                addOnDealId: number;
                promotionType: string;
                promotionId: number;
                orderItemId: number;
                promotionGroupId: number;
                imageInfo: {
                    imageUrl: string;
                };
                productLocationId: string[];
            }[];
            updateTime: number;
            checkoutShippingCarrier: string | null;
            reverseShippingFee: number | null;
            actualShippingFee: number | null;
            actualShippingFeeConfirmed: boolean;
            buyerCancelReason: string;
            buyerCpfId: string | null;
            buyerUserId: number;
            buyerUsername: string;
            cancelBy: string;
            cod: boolean;
            createTime: number;
            currency: string;
            daysToShip: number;
            dropshipperPhone: string | null;
            estimatedShippingFee: number;
            fulfillmentFlag: string;
            goodsToDeclare: boolean;
            invoiceData: {
                number: string;
                seriesNumber: string;
                accessKey: string;
                issueDate: number;
                totalValue: number;
                productsTotalValue: number;
                taxCode: string;
            } | null;
            prescriptionImages: string[] | null;
            prescriptionCheckStatus: number | null;
            orderChargeableWeightGram: number;
            messageToSeller: string;
            noteUpdateTime: number;
            orderStatus: "UNPAID" | "READY_TO_SHIP" | "RETRY_SHIP" | "IN_CANCEL" | "CANCELLED" | "PROCESSED" | "SHIPPED" | "TO_RETURN" | "TO_CONFIRM_RECEIVE" | "COMPLETED";
            packageList: {
                packageNumber: string;
                itemList: {
                    itemId: number;
                    modelId: number;
                    modelQuantity: number;
                }[];
                logisticsStatus: string;
                shippingCarrier: string;
                parcelChargeableWeightGram: number;
            }[];
            shippingCarrier: string;
            payTime: number | null;
            paymentMethod: string;
            pickupDoneTime: number;
            recipientAddress: {
                name: string;
                region: string;
                state: string;
                city: string;
                zipcode: string;
                district: string;
                town: string;
                phone: string;
                fullAddress: string;
            };
            shipByDate: number;
            splitUp: boolean;
            totalAmount: number;
            edtFrom?: number | undefined;
            edtTo?: number | undefined;
        }[];
    };
    requestId: string;
};
export declare const getOrderDetailMockHandler: import("msw").RestHandler<import("msw/lib/glossary-de6278a9").M<import("msw/lib/glossary-de6278a9").h>>;
export {};
//# sourceMappingURL=v2-order-get-order-detail.d.ts.map