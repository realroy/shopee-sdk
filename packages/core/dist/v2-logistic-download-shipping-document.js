import{z}from"zod";import _snakeCase from"lodash.snakecase";import{Readable}from"stream";import nodeFetch from"node-fetch";import{signURL,transformObjectKeys}from"./utils/index.js";import{ShopeeContext}from"./libs/index.js";import{API_V2_LOGISTIC_DOWNLOAD_SHIPPING_DOCUMENT,V2_LOGISTIC_SHIPPING_DOCUMENT_TYPES}from"./v2-logistic.constant.js";export const logisticDownloadShippingDocumentRequestParameterSchema=z.object({shippingDocumentType:z.enum(V2_LOGISTIC_SHIPPING_DOCUMENT_TYPES).optional(),orderList:z.array(z.object({orderSn:z.string(),packageNumber:z.string().optional().nullable()})).max(50)});export const logisticDownloadShippingDocumentResponseSchema=z.object({data:z.string()});export async function downloadShippingDocument(requestParameter){const parseRequestParameters=await logisticDownloadShippingDocumentRequestParameterSchema.safeParseAsync(requestParameter);if(!parseRequestParameters.success){throw new Error(`parse request parameters error: ${parseRequestParameters.error.message}`)}const contextInstance=ShopeeContext.getInstance();const context=contextInstance.value;const signedURL=await signURL({...context,path:API_V2_LOGISTIC_DOWNLOAD_SHIPPING_DOCUMENT,params:{}});const body=transformObjectKeys(parseRequestParameters.data,key=>_snakeCase(key.toString()));const res=await nodeFetch(signedURL,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(body)});if(res.body===null){return res.body}return Readable.from(res.body)}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy92Mi1sb2dpc3RpYy1kb3dubG9hZC1zaGlwcGluZy1kb2N1bWVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB6IH0gZnJvbSBcInpvZFwiO1xuaW1wb3J0IF9zbmFrZUNhc2UgZnJvbSBcImxvZGFzaC5zbmFrZWNhc2VcIjtcbmltcG9ydCB7IFJlYWRhYmxlIH0gZnJvbSBcInN0cmVhbVwiO1xuaW1wb3J0IG5vZGVGZXRjaCBmcm9tIFwibm9kZS1mZXRjaFwiO1xuXG5pbXBvcnQgeyBzaWduVVJMLCB0cmFuc2Zvcm1PYmplY3RLZXlzIH0gZnJvbSBcIi4vdXRpbHMvaW5kZXguanNcIjtcbmltcG9ydCB7IFNob3BlZUNvbnRleHQgfSBmcm9tIFwiLi9saWJzL2luZGV4LmpzXCI7XG5cbmltcG9ydCB7XG4gIEFQSV9WMl9MT0dJU1RJQ19ET1dOTE9BRF9TSElQUElOR19ET0NVTUVOVCxcbiAgVjJfTE9HSVNUSUNfU0hJUFBJTkdfRE9DVU1FTlRfVFlQRVMsXG59IGZyb20gXCIuL3YyLWxvZ2lzdGljLmNvbnN0YW50LmpzXCI7XG5cbmV4cG9ydCBjb25zdCBsb2dpc3RpY0Rvd25sb2FkU2hpcHBpbmdEb2N1bWVudFJlcXVlc3RQYXJhbWV0ZXJTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIHNoaXBwaW5nRG9jdW1lbnRUeXBlOiB6LmVudW0oVjJfTE9HSVNUSUNfU0hJUFBJTkdfRE9DVU1FTlRfVFlQRVMpLm9wdGlvbmFsKCksXG4gIG9yZGVyTGlzdDogelxuICAgIC5hcnJheShcbiAgICAgIHoub2JqZWN0KHtcbiAgICAgICAgb3JkZXJTbjogei5zdHJpbmcoKSxcbiAgICAgICAgcGFja2FnZU51bWJlcjogei5zdHJpbmcoKS5vcHRpb25hbCgpLm51bGxhYmxlKCksXG4gICAgICB9KVxuICAgIClcbiAgICAubWF4KDUwKSxcbn0pO1xuXG5leHBvcnQgY29uc3QgbG9naXN0aWNEb3dubG9hZFNoaXBwaW5nRG9jdW1lbnRSZXNwb25zZVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgZGF0YTogei5zdHJpbmcoKSxcbn0pO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZG93bmxvYWRTaGlwcGluZ0RvY3VtZW50KFxuICByZXF1ZXN0UGFyYW1ldGVyOiB6LmluZmVyPFxuICAgIHR5cGVvZiBsb2dpc3RpY0Rvd25sb2FkU2hpcHBpbmdEb2N1bWVudFJlcXVlc3RQYXJhbWV0ZXJTY2hlbWFcbiAgPlxuKSB7XG4gIGNvbnN0IHBhcnNlUmVxdWVzdFBhcmFtZXRlcnMgPVxuICAgIGF3YWl0IGxvZ2lzdGljRG93bmxvYWRTaGlwcGluZ0RvY3VtZW50UmVxdWVzdFBhcmFtZXRlclNjaGVtYS5zYWZlUGFyc2VBc3luYyhcbiAgICAgIHJlcXVlc3RQYXJhbWV0ZXJcbiAgICApO1xuXG4gIGlmICghcGFyc2VSZXF1ZXN0UGFyYW1ldGVycy5zdWNjZXNzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYHBhcnNlIHJlcXVlc3QgcGFyYW1ldGVycyBlcnJvcjogJHtwYXJzZVJlcXVlc3RQYXJhbWV0ZXJzLmVycm9yLm1lc3NhZ2V9YFxuICAgICk7XG4gIH1cblxuICBjb25zdCBjb250ZXh0SW5zdGFuY2UgPSBTaG9wZWVDb250ZXh0LmdldEluc3RhbmNlKCk7XG4gIGNvbnN0IGNvbnRleHQgPSBjb250ZXh0SW5zdGFuY2UudmFsdWU7XG5cbiAgY29uc3Qgc2lnbmVkVVJMID0gYXdhaXQgc2lnblVSTCh7XG4gICAgLi4uY29udGV4dCxcbiAgICBwYXRoOiBBUElfVjJfTE9HSVNUSUNfRE9XTkxPQURfU0hJUFBJTkdfRE9DVU1FTlQsXG4gICAgcGFyYW1zOiB7fSxcbiAgfSk7XG5cbiAgY29uc3QgYm9keSA9IHRyYW5zZm9ybU9iamVjdEtleXMocGFyc2VSZXF1ZXN0UGFyYW1ldGVycy5kYXRhLCAoa2V5KSA9PlxuICAgIF9zbmFrZUNhc2Uoa2V5LnRvU3RyaW5nKCkpXG4gICk7XG5cbiAgY29uc3QgcmVzID0gYXdhaXQgbm9kZUZldGNoKHNpZ25lZFVSTCwge1xuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgaGVhZGVyczoge1xuICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfSxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeShib2R5KSxcbiAgfSk7XG5cbiAgaWYgKHJlcy5ib2R5ID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHJlcy5ib2R5O1xuICB9XG5cbiAgcmV0dXJuIFJlYWRhYmxlLmZyb20ocmVzLmJvZHkpO1xufVxuIl0sIm5hbWVzIjpbInoiLCJfc25ha2VDYXNlIiwiUmVhZGFibGUiLCJub2RlRmV0Y2giLCJzaWduVVJMIiwidHJhbnNmb3JtT2JqZWN0S2V5cyIsIlNob3BlZUNvbnRleHQiLCJBUElfVjJfTE9HSVNUSUNfRE9XTkxPQURfU0hJUFBJTkdfRE9DVU1FTlQiLCJWMl9MT0dJU1RJQ19TSElQUElOR19ET0NVTUVOVF9UWVBFUyIsImxvZ2lzdGljRG93bmxvYWRTaGlwcGluZ0RvY3VtZW50UmVxdWVzdFBhcmFtZXRlclNjaGVtYSIsIm9iamVjdCIsInNoaXBwaW5nRG9jdW1lbnRUeXBlIiwiZW51bSIsIm9wdGlvbmFsIiwib3JkZXJMaXN0IiwiYXJyYXkiLCJvcmRlclNuIiwic3RyaW5nIiwicGFja2FnZU51bWJlciIsIm51bGxhYmxlIiwibWF4IiwibG9naXN0aWNEb3dubG9hZFNoaXBwaW5nRG9jdW1lbnRSZXNwb25zZVNjaGVtYSIsImRhdGEiLCJkb3dubG9hZFNoaXBwaW5nRG9jdW1lbnQiLCJyZXF1ZXN0UGFyYW1ldGVyIiwicGFyc2VSZXF1ZXN0UGFyYW1ldGVycyIsInNhZmVQYXJzZUFzeW5jIiwic3VjY2VzcyIsIkVycm9yIiwiZXJyb3IiLCJtZXNzYWdlIiwiY29udGV4dEluc3RhbmNlIiwiZ2V0SW5zdGFuY2UiLCJjb250ZXh0IiwidmFsdWUiLCJzaWduZWRVUkwiLCJwYXRoIiwicGFyYW1zIiwiYm9keSIsImtleSIsInRvU3RyaW5nIiwicmVzIiwibWV0aG9kIiwiaGVhZGVycyIsIkpTT04iLCJzdHJpbmdpZnkiLCJmcm9tIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFTQSxDQUFDLEtBQVEsS0FBTSxBQUN4QixRQUFPQyxlQUFnQixrQkFBbUIsQUFDMUMsUUFBU0MsUUFBUSxLQUFRLFFBQVMsQUFDbEMsUUFBT0MsY0FBZSxZQUFhLEFBRW5DLFFBQVNDLE9BQU8sQ0FBRUMsbUJBQW1CLEtBQVEsa0JBQW1CLEFBQ2hFLFFBQVNDLGFBQWEsS0FBUSxpQkFBa0IsQUFFaEQsUUFDRUMsMENBQTBDLENBQzFDQyxtQ0FBbUMsS0FDOUIsMkJBQTRCLEFBRW5DLFFBQU8sTUFBTUMsdURBQXlEVCxFQUFFVSxNQUFNLENBQUMsQ0FDN0VDLHFCQUFzQlgsRUFBRVksSUFBSSxDQUFDSixxQ0FBcUNLLFFBQVEsR0FDMUVDLFVBQVdkLEVBQ1JlLEtBQUssQ0FDSmYsRUFBRVUsTUFBTSxDQUFDLENBQ1BNLFFBQVNoQixFQUFFaUIsTUFBTSxHQUNqQkMsY0FBZWxCLEVBQUVpQixNQUFNLEdBQUdKLFFBQVEsR0FBR00sUUFBUSxFQUMvQyxJQUVEQyxHQUFHLENBQUMsR0FDVCxFQUFHLEFBRUgsUUFBTyxNQUFNQywrQ0FBaURyQixFQUFFVSxNQUFNLENBQUMsQ0FDckVZLEtBQU10QixFQUFFaUIsTUFBTSxFQUNoQixFQUFHLEFBRUgsUUFBTyxlQUFlTSx5QkFDcEJDLGdCQUVDLEVBRUQsTUFBTUMsdUJBQ0osTUFBTWhCLHVEQUF1RGlCLGNBQWMsQ0FDekVGLGtCQUdKLEdBQUksQ0FBQ0MsdUJBQXVCRSxPQUFPLENBQUUsQ0FDbkMsTUFBTSxJQUFJQyxNQUNSLENBQUMsZ0NBQWdDLEVBQUVILHVCQUF1QkksS0FBSyxDQUFDQyxPQUFPLENBQUMsQ0FBQyxDQUU3RSxDQUVBLE1BQU1DLGdCQUFrQnpCLGNBQWMwQixXQUFXLEdBQ2pELE1BQU1DLFFBQVVGLGdCQUFnQkcsS0FBSyxDQUVyQyxNQUFNQyxVQUFZLE1BQU0vQixRQUFRLENBQzlCLEdBQUc2QixPQUFPLENBQ1ZHLEtBQU03QiwyQ0FDTjhCLE9BQVEsQ0FBQyxDQUNYLEdBRUEsTUFBTUMsS0FBT2pDLG9CQUFvQm9CLHVCQUF1QkgsSUFBSSxDQUFFLEFBQUNpQixLQUM3RHRDLFdBQVdzQyxJQUFJQyxRQUFRLEtBR3pCLE1BQU1DLElBQU0sTUFBTXRDLFVBQVVnQyxVQUFXLENBQ3JDTyxPQUFRLE9BQ1JDLFFBQVMsQ0FDUCxlQUFnQixrQkFDbEIsRUFDQUwsS0FBTU0sS0FBS0MsU0FBUyxDQUFDUCxLQUN2QixHQUVBLEdBQUlHLElBQUlILElBQUksR0FBSyxLQUFNLENBQ3JCLE9BQU9HLElBQUlILElBQUksQUFDakIsQ0FFQSxPQUFPcEMsU0FBUzRDLElBQUksQ0FBQ0wsSUFBSUgsSUFBSSxDQUMvQiJ9