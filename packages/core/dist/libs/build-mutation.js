import _snakeCase from"lodash.snakecase";import _camelCase from"lodash.camelcase";import{HttpClient}from"./http-client.js";import{ShopeeContext}from"./shopee-context.js";import{signURL,transformObjectKeys}from"../utils/index.js";const httpClient=HttpClient.getInstance();export function buildMutation({responseType="json",...args}){function transformRequestParameter(data){if(!args.transformRequestParameter){return data}return args.transformRequestParameter(data)}return async function mutation(requestParameters){const transformedRequestParameter=transformRequestParameter(requestParameters);const parseRequestParameters=await args.requestParameterSchema.safeParseAsync(transformedRequestParameter);if(!parseRequestParameters.success){throw new Error(`parse request parameters error: ${parseRequestParameters.error.message}`)}const contextInstance=ShopeeContext.getInstance();const context=contextInstance.value;httpClient.setLogEnabled(contextInstance.isLogEnabled);const signedURL=await signURL({...context,path:args.path,params:{}});const body=transformObjectKeys(parseRequestParameters.data,key=>_snakeCase(key.toString()));const response=await httpClient.post(signedURL,{},body,responseType);const data=transformObjectKeys(response.data,key=>_camelCase(key.toString()));const parseData=await args.responseSchema.safeParseAsync(data);if(!parseData.success){throw new Error(`parse response error: ${parseData.error.message}`)}return parseData.data}}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWJzL2J1aWxkLW11dGF0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHogfSBmcm9tIFwiem9kXCI7XG5pbXBvcnQgX3NuYWtlQ2FzZSBmcm9tIFwibG9kYXNoLnNuYWtlY2FzZVwiO1xuaW1wb3J0IF9jYW1lbENhc2UgZnJvbSBcImxvZGFzaC5jYW1lbGNhc2VcIjtcblxuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gXCIuL2h0dHAtY2xpZW50LmpzXCI7XG5pbXBvcnQgeyBTaG9wZWVDb250ZXh0IH0gZnJvbSBcIi4vc2hvcGVlLWNvbnRleHQuanNcIjtcblxuaW1wb3J0IHsgc2lnblVSTCwgdHJhbnNmb3JtT2JqZWN0S2V5cyB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xuXG5pbXBvcnQgdHlwZSB7IFJlc3BvbnNlVHlwZSB9IGZyb20gXCJheGlvc1wiO1xuXG5jb25zdCBodHRwQ2xpZW50ID0gSHR0cENsaWVudC5nZXRJbnN0YW5jZSgpO1xuXG5leHBvcnQgdHlwZSBCdWlsZE11dGF0aW9uQXJnczxcbiAgVFJlcXVlc3RQYXJhbWV0ZXJTY2hlbWEgZXh0ZW5kcyB6LlpvZFJhd1NoYXBlLFxuICBUUmVzcG9uc2VTY2hlbWEgZXh0ZW5kcyB6LlpvZFJhd1NoYXBlXG4+ID0ge1xuICBwYXRoOiBzdHJpbmc7XG4gIHJlcXVlc3RQYXJhbWV0ZXJTY2hlbWE6IHouWm9kT2JqZWN0PFRSZXF1ZXN0UGFyYW1ldGVyU2NoZW1hPjtcbiAgcmVzcG9uc2VTY2hlbWE/OiB6LlpvZE9iamVjdDxUUmVzcG9uc2VTY2hlbWE+IHwgei5ab2RBbnk7XG4gIHRyYW5zZm9ybVJlcXVlc3RQYXJhbWV0ZXI/OiAoXG4gICAgZGF0YTogei5pbmZlcjx6LlpvZE9iamVjdDxUUmVxdWVzdFBhcmFtZXRlclNjaGVtYT4+XG4gICkgPT4gdHlwZW9mIGRhdGE7XG4gIHJlc3BvbnNlVHlwZT86IFJlc3BvbnNlVHlwZTtcbiAgaGVhZGVycz86IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IG51bWJlcj47XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRNdXRhdGlvbjxcbiAgVFJlcXVlc3RQYXJhbWV0ZXJTY2hlbWEgZXh0ZW5kcyB6LlpvZFJhd1NoYXBlLFxuICBUUmVzcG9uc2VTY2hlbWEgZXh0ZW5kcyB6LlpvZFJhd1NoYXBlXG4+KHtcbiAgcmVzcG9uc2VUeXBlID0gXCJqc29uXCIsXG4gIC4uLmFyZ3Ncbn06IEJ1aWxkTXV0YXRpb25BcmdzPFRSZXF1ZXN0UGFyYW1ldGVyU2NoZW1hLCBUUmVzcG9uc2VTY2hlbWE+KSB7XG4gIHR5cGUgVFJlcXVlc3RQYXJhbWV0ZXJzID0gei5pbmZlcjx0eXBlb2YgYXJncy5yZXF1ZXN0UGFyYW1ldGVyU2NoZW1hPjtcblxuICBmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0UGFyYW1ldGVyKFxuICAgIGRhdGE6IHouaW5mZXI8ei5ab2RPYmplY3Q8VFJlcXVlc3RQYXJhbWV0ZXJTY2hlbWE+PlxuICApIHtcbiAgICBpZiAoIWFyZ3MudHJhbnNmb3JtUmVxdWVzdFBhcmFtZXRlcikge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFyZ3MudHJhbnNmb3JtUmVxdWVzdFBhcmFtZXRlcihkYXRhKTtcbiAgfVxuXG4gIHJldHVybiBhc3luYyBmdW5jdGlvbiBtdXRhdGlvbihyZXF1ZXN0UGFyYW1ldGVyczogVFJlcXVlc3RQYXJhbWV0ZXJzKSB7XG4gICAgY29uc3QgdHJhbnNmb3JtZWRSZXF1ZXN0UGFyYW1ldGVyID1cbiAgICAgIHRyYW5zZm9ybVJlcXVlc3RQYXJhbWV0ZXIocmVxdWVzdFBhcmFtZXRlcnMpO1xuXG4gICAgY29uc3QgcGFyc2VSZXF1ZXN0UGFyYW1ldGVycyA9XG4gICAgICBhd2FpdCBhcmdzLnJlcXVlc3RQYXJhbWV0ZXJTY2hlbWEuc2FmZVBhcnNlQXN5bmMoXG4gICAgICAgIHRyYW5zZm9ybWVkUmVxdWVzdFBhcmFtZXRlclxuICAgICAgKTtcblxuICAgIGlmICghcGFyc2VSZXF1ZXN0UGFyYW1ldGVycy5zdWNjZXNzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBwYXJzZSByZXF1ZXN0IHBhcmFtZXRlcnMgZXJyb3I6ICR7cGFyc2VSZXF1ZXN0UGFyYW1ldGVycy5lcnJvci5tZXNzYWdlfWBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgY29udGV4dEluc3RhbmNlID0gU2hvcGVlQ29udGV4dC5nZXRJbnN0YW5jZSgpO1xuICAgIGNvbnN0IGNvbnRleHQgPSBjb250ZXh0SW5zdGFuY2UudmFsdWU7XG5cbiAgICBodHRwQ2xpZW50LnNldExvZ0VuYWJsZWQoY29udGV4dEluc3RhbmNlLmlzTG9nRW5hYmxlZCk7XG5cbiAgICBjb25zdCBzaWduZWRVUkwgPSBhd2FpdCBzaWduVVJMKHtcbiAgICAgIC4uLmNvbnRleHQsXG4gICAgICBwYXRoOiBhcmdzLnBhdGgsXG4gICAgICBwYXJhbXM6IHt9LFxuICAgIH0pO1xuXG4gICAgY29uc3QgYm9keSA9IHRyYW5zZm9ybU9iamVjdEtleXMocGFyc2VSZXF1ZXN0UGFyYW1ldGVycy5kYXRhLCAoa2V5KSA9PlxuICAgICAgX3NuYWtlQ2FzZShrZXkudG9TdHJpbmcoKSlcbiAgICApO1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBodHRwQ2xpZW50LnBvc3Qoc2lnbmVkVVJMLCB7fSwgYm9keSwgcmVzcG9uc2VUeXBlKTtcblxuICAgIC8vIGlmIChyZXNwb25zZVR5cGUgIT09IFwianNvblwiIHx8IGFyZ3MucmVzcG9uc2VTY2hlbWEgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgLy8gfVxuXG4gICAgY29uc3QgZGF0YSA9IHRyYW5zZm9ybU9iamVjdEtleXMocmVzcG9uc2UuZGF0YSwgKGtleSkgPT5cbiAgICAgIF9jYW1lbENhc2Uoa2V5LnRvU3RyaW5nKCkpXG4gICAgKTtcblxuICAgIGNvbnN0IHBhcnNlRGF0YSA9IGF3YWl0IChcbiAgICAgIGFyZ3MucmVzcG9uc2VTY2hlbWEgYXMgei5ab2RPYmplY3Q8VFJlc3BvbnNlU2NoZW1hPlxuICAgICkuc2FmZVBhcnNlQXN5bmMoZGF0YSk7XG5cbiAgICBpZiAoIXBhcnNlRGF0YS5zdWNjZXNzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHBhcnNlIHJlc3BvbnNlIGVycm9yOiAke3BhcnNlRGF0YS5lcnJvci5tZXNzYWdlfWApO1xuICAgIH1cblxuICAgIHJldHVybiBwYXJzZURhdGEuZGF0YTtcbiAgfTtcbn1cbiJdLCJuYW1lcyI6WyJfc25ha2VDYXNlIiwiX2NhbWVsQ2FzZSIsIkh0dHBDbGllbnQiLCJTaG9wZWVDb250ZXh0Iiwic2lnblVSTCIsInRyYW5zZm9ybU9iamVjdEtleXMiLCJodHRwQ2xpZW50IiwiZ2V0SW5zdGFuY2UiLCJidWlsZE11dGF0aW9uIiwicmVzcG9uc2VUeXBlIiwiYXJncyIsInRyYW5zZm9ybVJlcXVlc3RQYXJhbWV0ZXIiLCJkYXRhIiwibXV0YXRpb24iLCJyZXF1ZXN0UGFyYW1ldGVycyIsInRyYW5zZm9ybWVkUmVxdWVzdFBhcmFtZXRlciIsInBhcnNlUmVxdWVzdFBhcmFtZXRlcnMiLCJyZXF1ZXN0UGFyYW1ldGVyU2NoZW1hIiwic2FmZVBhcnNlQXN5bmMiLCJzdWNjZXNzIiwiRXJyb3IiLCJlcnJvciIsIm1lc3NhZ2UiLCJjb250ZXh0SW5zdGFuY2UiLCJjb250ZXh0IiwidmFsdWUiLCJzZXRMb2dFbmFibGVkIiwiaXNMb2dFbmFibGVkIiwic2lnbmVkVVJMIiwicGF0aCIsInBhcmFtcyIsImJvZHkiLCJrZXkiLCJ0b1N0cmluZyIsInJlc3BvbnNlIiwicG9zdCIsInBhcnNlRGF0YSIsInJlc3BvbnNlU2NoZW1hIl0sIm1hcHBpbmdzIjoiQUFDQSxPQUFPQSxlQUFnQixrQkFBbUIsQUFDMUMsUUFBT0MsZUFBZ0Isa0JBQW1CLEFBRTFDLFFBQVNDLFVBQVUsS0FBUSxrQkFBbUIsQUFDOUMsUUFBU0MsYUFBYSxLQUFRLHFCQUFzQixBQUVwRCxRQUFTQyxPQUFPLENBQUVDLG1CQUFtQixLQUFRLG1CQUFvQixDQUlqRSxNQUFNQyxXQUFhSixXQUFXSyxXQUFXLEVBZ0J6QyxRQUFPLFNBQVNDLGNBR2QsQ0FDQUMsYUFBZSxNQUFNLENBQ3JCLEdBQUdDLEtBQ3lELEVBRzVELFNBQVNDLDBCQUNQQyxJQUFtRCxFQUVuRCxHQUFJLENBQUNGLEtBQUtDLHlCQUF5QixDQUFFLENBQ25DLE9BQU9DLElBQ1QsQ0FFQSxPQUFPRixLQUFLQyx5QkFBeUIsQ0FBQ0MsS0FDeEMsQ0FFQSxPQUFPLGVBQWVDLFNBQVNDLGlCQUFxQyxFQUNsRSxNQUFNQyw0QkFDSkosMEJBQTBCRyxtQkFFNUIsTUFBTUUsdUJBQ0osTUFBTU4sS0FBS08sc0JBQXNCLENBQUNDLGNBQWMsQ0FDOUNILDZCQUdKLEdBQUksQ0FBQ0MsdUJBQXVCRyxPQUFPLENBQUUsQ0FDbkMsTUFBTSxJQUFJQyxNQUNSLENBQUMsZ0NBQWdDLEVBQUVKLHVCQUF1QkssS0FBSyxDQUFDQyxPQUFPLENBQUMsQ0FBQyxDQUU3RSxDQUVBLE1BQU1DLGdCQUFrQnBCLGNBQWNJLFdBQVcsR0FDakQsTUFBTWlCLFFBQVVELGdCQUFnQkUsS0FBSyxDQUVyQ25CLFdBQVdvQixhQUFhLENBQUNILGdCQUFnQkksWUFBWSxFQUVyRCxNQUFNQyxVQUFZLE1BQU14QixRQUFRLENBQzlCLEdBQUdvQixPQUFPLENBQ1ZLLEtBQU1uQixLQUFLbUIsSUFBSSxDQUNmQyxPQUFRLENBQUMsQ0FDWCxHQUVBLE1BQU1DLEtBQU8xQixvQkFBb0JXLHVCQUF1QkosSUFBSSxDQUFFLEFBQUNvQixLQUM3RGhDLFdBQVdnQyxJQUFJQyxRQUFRLEtBR3pCLE1BQU1DLFNBQVcsTUFBTTVCLFdBQVc2QixJQUFJLENBQUNQLFVBQVcsQ0FBQyxFQUFHRyxLQUFNdEIsY0FNNUQsTUFBTUcsS0FBT1Asb0JBQW9CNkIsU0FBU3RCLElBQUksQ0FBRSxBQUFDb0IsS0FDL0MvQixXQUFXK0IsSUFBSUMsUUFBUSxLQUd6QixNQUFNRyxVQUFZLE1BQU0sQUFDdEIxQixLQUFLMkIsY0FBYyxDQUNuQm5CLGNBQWMsQ0FBQ04sTUFFakIsR0FBSSxDQUFDd0IsVUFBVWpCLE9BQU8sQ0FBRSxDQUN0QixNQUFNLElBQUlDLE1BQU0sQ0FBQyxzQkFBc0IsRUFBRWdCLFVBQVVmLEtBQUssQ0FBQ0MsT0FBTyxDQUFDLENBQUMsQ0FDcEUsQ0FFQSxPQUFPYyxVQUFVeEIsSUFBSSxBQUN2QixDQUNGIn0=