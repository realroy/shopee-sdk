import Axios from"axios";export class HttpClient{static instance;axios;logger=console;isLogEnabled;logInterceptorIds=[];constructor(){this.isLogEnabled=false;this.axios=Axios.create();if(this.isLogEnabled){this.addLogInterceptor()}}addLogInterceptor(){const requestLogInterceptorId=this.axios.interceptors.request.use(value=>{this.logger.log(`${value.url}`);if(value.data){this.logger.info(`[Body]: ${JSON.stringify(value.data,null,4)}`)}return value},error=>{this.logger.error(error);throw error});const responseLogInterceptorId=this.axios.interceptors.response.use(value=>{this.logger.log(`[Response]: ${JSON.stringify(value.data,null,4)}`);return value},error=>{const{response,message,config:{method,url,data,params}}=error;const status=response?.status;this.logger.error({status,message,method,url,data,params});throw error});this.logInterceptorIds=[requestLogInterceptorId,responseLogInterceptorId]}removeLogInterceptor(){this.logInterceptorIds.forEach(this.axios.interceptors.request.eject)}static getInstance(){return this.instance??(this.instance=new HttpClient)}setLogEnabled(newValue){this.isLogEnabled=newValue;if(this.isLogEnabled){this.addLogInterceptor()}else{this.removeLogInterceptor()}return this.isLogEnabled}get(url,params){return this.axios.get(url,{params})}post(url,params,body,responseType){return this.axios.post(url,body,{params,...responseType&&{responseType}})}}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWJzL2h0dHAtY2xpZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBeGlvcyBmcm9tIFwiYXhpb3NcIjtcblxuaW1wb3J0IHR5cGUgeyBBeGlvc0luc3RhbmNlLCBSZXNwb25zZVR5cGUgfSBmcm9tIFwiYXhpb3NcIjtcblxuZXhwb3J0IGNsYXNzIEh0dHBDbGllbnQge1xuICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogSHR0cENsaWVudDtcbiAgcHJpdmF0ZSByZWFkb25seSBheGlvczogQXhpb3NJbnN0YW5jZTtcbiAgcHJpdmF0ZSByZWFkb25seSBsb2dnZXIgPSBjb25zb2xlO1xuXG4gIHByaXZhdGUgaXNMb2dFbmFibGVkOiBib29sZWFuO1xuICBwcml2YXRlIGxvZ0ludGVyY2VwdG9ySWRzOiBudW1iZXJbXSA9IFtdO1xuXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5pc0xvZ0VuYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLmF4aW9zID0gQXhpb3MuY3JlYXRlKCk7XG4gICAgaWYgKHRoaXMuaXNMb2dFbmFibGVkKSB7XG4gICAgICB0aGlzLmFkZExvZ0ludGVyY2VwdG9yKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhZGRMb2dJbnRlcmNlcHRvcigpIHtcbiAgICBjb25zdCByZXF1ZXN0TG9nSW50ZXJjZXB0b3JJZCA9IHRoaXMuYXhpb3MuaW50ZXJjZXB0b3JzLnJlcXVlc3QudXNlKFxuICAgICAgKHZhbHVlKSA9PiB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmxvZyhgJHt2YWx1ZS51cmx9YCk7XG4gICAgICAgIGlmICh2YWx1ZS5kYXRhKSB7XG4gICAgICAgICAgdGhpcy5sb2dnZXIuaW5mbyhgW0JvZHldOiAke0pTT04uc3RyaW5naWZ5KHZhbHVlLmRhdGEsIG51bGwsIDQpfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfSxcbiAgICAgIChlcnJvcikgPT4ge1xuICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihlcnJvcik7XG5cbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgKTtcblxuICAgIGNvbnN0IHJlc3BvbnNlTG9nSW50ZXJjZXB0b3JJZCA9IHRoaXMuYXhpb3MuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLnVzZShcbiAgICAgICh2YWx1ZSkgPT4ge1xuICAgICAgICB0aGlzLmxvZ2dlci5sb2coYFtSZXNwb25zZV06ICR7SlNPTi5zdHJpbmdpZnkodmFsdWUuZGF0YSwgbnVsbCwgNCl9YCk7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH0sXG4gICAgICAoZXJyb3IpID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIHJlc3BvbnNlLFxuICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgICAgY29uZmlnOiB7IG1ldGhvZCwgdXJsLCBkYXRhLCBwYXJhbXMgfSxcbiAgICAgICAgfSA9IGVycm9yO1xuICAgICAgICBjb25zdCBzdGF0dXMgPSByZXNwb25zZT8uc3RhdHVzO1xuICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcih7IHN0YXR1cywgbWVzc2FnZSwgbWV0aG9kLCB1cmwsIGRhdGEsIHBhcmFtcyB9KTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgKTtcblxuICAgIHRoaXMubG9nSW50ZXJjZXB0b3JJZHMgPSBbXG4gICAgICByZXF1ZXN0TG9nSW50ZXJjZXB0b3JJZCxcbiAgICAgIHJlc3BvbnNlTG9nSW50ZXJjZXB0b3JJZCxcbiAgICBdO1xuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVMb2dJbnRlcmNlcHRvcigpIHtcbiAgICB0aGlzLmxvZ0ludGVyY2VwdG9ySWRzLmZvckVhY2godGhpcy5heGlvcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5lamVjdCk7XG4gIH1cblxuICBzdGF0aWMgZ2V0SW5zdGFuY2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2UgPz8gKHRoaXMuaW5zdGFuY2UgPSBuZXcgSHR0cENsaWVudCgpKTtcbiAgfVxuXG4gIHNldExvZ0VuYWJsZWQobmV3VmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmlzTG9nRW5hYmxlZCA9IG5ld1ZhbHVlO1xuICAgIGlmICh0aGlzLmlzTG9nRW5hYmxlZCkge1xuICAgICAgdGhpcy5hZGRMb2dJbnRlcmNlcHRvcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbW92ZUxvZ0ludGVyY2VwdG9yKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuaXNMb2dFbmFibGVkO1xuICB9XG5cbiAgZ2V0KHVybDogc3RyaW5nLCBwYXJhbXM/OiBvYmplY3QpIHtcbiAgICByZXR1cm4gdGhpcy5heGlvcy5nZXQodXJsLCB7IHBhcmFtcyB9KTtcbiAgfVxuXG4gIHBvc3QoXG4gICAgdXJsOiBzdHJpbmcsXG4gICAgcGFyYW1zPzogb2JqZWN0LFxuICAgIGJvZHk/OiBvYmplY3QsXG4gICAgcmVzcG9uc2VUeXBlPzogUmVzcG9uc2VUeXBlXG4gICkge1xuICAgIHJldHVybiB0aGlzLmF4aW9zLnBvc3QodXJsLCBib2R5LCB7XG4gICAgICBwYXJhbXMsXG4gICAgICAuLi4ocmVzcG9uc2VUeXBlICYmIHsgcmVzcG9uc2VUeXBlIH0pLFxuICAgIH0pO1xuICB9XG59XG4iXSwibmFtZXMiOlsiQXhpb3MiLCJIdHRwQ2xpZW50IiwiaW5zdGFuY2UiLCJheGlvcyIsImxvZ2dlciIsImNvbnNvbGUiLCJpc0xvZ0VuYWJsZWQiLCJsb2dJbnRlcmNlcHRvcklkcyIsImNyZWF0ZSIsImFkZExvZ0ludGVyY2VwdG9yIiwicmVxdWVzdExvZ0ludGVyY2VwdG9ySWQiLCJpbnRlcmNlcHRvcnMiLCJyZXF1ZXN0IiwidXNlIiwidmFsdWUiLCJsb2ciLCJ1cmwiLCJkYXRhIiwiaW5mbyIsIkpTT04iLCJzdHJpbmdpZnkiLCJlcnJvciIsInJlc3BvbnNlTG9nSW50ZXJjZXB0b3JJZCIsInJlc3BvbnNlIiwibWVzc2FnZSIsImNvbmZpZyIsIm1ldGhvZCIsInBhcmFtcyIsInN0YXR1cyIsInJlbW92ZUxvZ0ludGVyY2VwdG9yIiwiZm9yRWFjaCIsImVqZWN0IiwiZ2V0SW5zdGFuY2UiLCJzZXRMb2dFbmFibGVkIiwibmV3VmFsdWUiLCJnZXQiLCJwb3N0IiwiYm9keSIsInJlc3BvbnNlVHlwZSJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsVUFBVyxPQUFRLEFBSTFCLFFBQU8sTUFBTUMsV0FDWCxPQUFlQyxRQUFxQixBQUNwQyxDQUFpQkMsS0FBcUIsQUFDdEMsQ0FBaUJDLE9BQVNDLE9BQVEsQUFFbEMsQ0FBUUMsWUFBc0IsQUFDOUIsQ0FBUUMsa0JBQThCLEVBQUUsQUFBQyxBQUV6QyxjQUFzQixDQUNwQixJQUFJLENBQUNELFlBQVksQ0FBRyxLQUNwQixDQUFBLElBQUksQ0FBQ0gsS0FBSyxDQUFHSCxNQUFNUSxNQUFNLEdBQ3pCLEdBQUksSUFBSSxDQUFDRixZQUFZLENBQUUsQ0FDckIsSUFBSSxDQUFDRyxpQkFBaUIsRUFDeEIsQ0FDRixDQUVBLEFBQVFBLG1CQUFvQixDQUMxQixNQUFNQyx3QkFBMEIsSUFBSSxDQUFDUCxLQUFLLENBQUNRLFlBQVksQ0FBQ0MsT0FBTyxDQUFDQyxHQUFHLENBQ2pFLEFBQUNDLFFBQ0MsSUFBSSxDQUFDVixNQUFNLENBQUNXLEdBQUcsQ0FBQyxDQUFDLEVBQUVELE1BQU1FLEdBQUcsQ0FBQyxDQUFDLEVBQzlCLEdBQUlGLE1BQU1HLElBQUksQ0FBRSxDQUNkLElBQUksQ0FBQ2IsTUFBTSxDQUFDYyxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUVDLEtBQUtDLFNBQVMsQ0FBQ04sTUFBTUcsSUFBSSxDQUFFLEtBQU0sR0FBRyxDQUFDLENBQ25FLENBRUEsT0FBT0gsS0FDVCxFQUNBLEFBQUNPLFFBQ0MsSUFBSSxDQUFDakIsTUFBTSxDQUFDaUIsS0FBSyxDQUFDQSxNQUVsQixPQUFNQSxLQUNSLEdBR0YsTUFBTUMseUJBQTJCLElBQUksQ0FBQ25CLEtBQUssQ0FBQ1EsWUFBWSxDQUFDWSxRQUFRLENBQUNWLEdBQUcsQ0FDbkUsQUFBQ0MsUUFDQyxJQUFJLENBQUNWLE1BQU0sQ0FBQ1csR0FBRyxDQUFDLENBQUMsWUFBWSxFQUFFSSxLQUFLQyxTQUFTLENBQUNOLE1BQU1HLElBQUksQ0FBRSxLQUFNLEdBQUcsQ0FBQyxFQUNwRSxPQUFPSCxLQUNULEVBQ0EsQUFBQ08sUUFDQyxLQUFNLENBQ0pFLFFBQVEsQ0FDUkMsT0FBTyxDQUNQQyxPQUFRLENBQUVDLE1BQU0sQ0FBRVYsR0FBRyxDQUFFQyxJQUFJLENBQUVVLE1BQU0sQ0FBRSxDQUN0QyxDQUFHTixNQUNKLE1BQU1PLE9BQVNMLFVBQVVLLE9BQ3pCLElBQUksQ0FBQ3hCLE1BQU0sQ0FBQ2lCLEtBQUssQ0FBQyxDQUFFTyxPQUFRSixRQUFTRSxPQUFRVixJQUFLQyxLQUFNVSxNQUFPLEVBQy9ELE9BQU1OLEtBQ1IsRUFHRixDQUFBLElBQUksQ0FBQ2QsaUJBQWlCLENBQUcsQ0FDdkJHLHdCQUNBWSx5QkFDRCxBQUNILENBRUEsQUFBUU8sc0JBQXVCLENBQzdCLElBQUksQ0FBQ3RCLGlCQUFpQixDQUFDdUIsT0FBTyxDQUFDLElBQUksQ0FBQzNCLEtBQUssQ0FBQ1EsWUFBWSxDQUFDQyxPQUFPLENBQUNtQixLQUFLLENBQ3RFLENBRUEsT0FBT0MsYUFBYyxDQUNuQixPQUFPLElBQUksQ0FBQzlCLFFBQVEsRUFBSyxDQUFBLElBQUksQ0FBQ0EsUUFBUSxDQUFHLElBQUlELFVBQVcsQ0FDMUQsQ0FFQWdDLGNBQWNDLFFBQWlCLENBQUUsQ0FDL0IsSUFBSSxDQUFDNUIsWUFBWSxDQUFHNEIsU0FDcEIsR0FBSSxJQUFJLENBQUM1QixZQUFZLENBQUUsQ0FDckIsSUFBSSxDQUFDRyxpQkFBaUIsRUFDeEIsS0FBTyxDQUNMLElBQUksQ0FBQ29CLG9CQUFvQixFQUMzQixDQUVBLE9BQU8sSUFBSSxDQUFDdkIsWUFBWSxBQUMxQixDQUVBNkIsSUFBSW5CLEdBQVcsQ0FBRVcsTUFBZSxDQUFFLENBQ2hDLE9BQU8sSUFBSSxDQUFDeEIsS0FBSyxDQUFDZ0MsR0FBRyxDQUFDbkIsSUFBSyxDQUFFVyxNQUFPLEVBQ3RDLENBRUFTLEtBQ0VwQixHQUFXLENBQ1hXLE1BQWUsQ0FDZlUsSUFBYSxDQUNiQyxZQUEyQixDQUMzQixDQUNBLE9BQU8sSUFBSSxDQUFDbkMsS0FBSyxDQUFDaUMsSUFBSSxDQUFDcEIsSUFBS3FCLEtBQU0sQ0FDaENWLE9BQ0EsR0FBSVcsY0FBZ0IsQ0FBRUEsWUFBYSxDQUFDLEFBQ3RDLEVBQ0YsQ0FDRiJ9