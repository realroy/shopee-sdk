import _snakeCase from"lodash.snakecase";import _camelCase from"lodash.camelcase";import{HttpClient}from"./http-client.js";import{ShopeeContext}from"./shopee-context.js";import{signURL,transformObjectKeys}from"../utils/index.js";const httpClient=HttpClient.getInstance();function createTransform(args){return async function transformParsedRequestParameters(parsedRequestParameterData){if(!args.transformRequestParameter){return parsedRequestParameterData}const data=args.transformRequestParameter(parsedRequestParameterData);if(!args.transformRequestParameterSchema){return parsedRequestParameterData}const result=await args.transformRequestParameterSchema.safeParseAsync(data);if(!result.success){throw new Error(`transform request parameters error: ${result.error.message}`)}return result.data}}export function buildQuery(args){const transformParsedRequestParameters=createTransform(args);return async function query(requestParameters){const parseRequestParameters=await args.requestParameterSchema.safeParseAsync(requestParameters);if(!parseRequestParameters.success){throw new Error(`parse request parameters error: ${parseRequestParameters.error.message}`)}const transformRequestParametersData=await transformParsedRequestParameters(parseRequestParameters.data);const parsedRequestParameters=transformObjectKeys(transformRequestParametersData,key=>_snakeCase(key.toString()));const contextInstance=ShopeeContext.getInstance();const context=contextInstance.value;httpClient.setLogEnabled(contextInstance.isLogEnabled);const signedURL=await signURL({...context,path:args.path,params:parsedRequestParameters});const response=await httpClient.get(signedURL);const data=transformObjectKeys(response.data,key=>_camelCase(key.toString()));const parseData=await args.responseSchema.safeParseAsync(data);if(!parseData.success){throw new Error(`parse response error: ${parseData.error.message}`)}const parsedData=parseData.data;return parsedData}}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWJzL2J1aWxkLXF1ZXJ5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHogfSBmcm9tIFwiem9kXCI7XG5pbXBvcnQgX3NuYWtlQ2FzZSBmcm9tIFwibG9kYXNoLnNuYWtlY2FzZVwiO1xuaW1wb3J0IF9jYW1lbENhc2UgZnJvbSBcImxvZGFzaC5jYW1lbGNhc2VcIjtcblxuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gXCIuL2h0dHAtY2xpZW50LmpzXCI7XG5pbXBvcnQgeyBTaG9wZWVDb250ZXh0IH0gZnJvbSBcIi4vc2hvcGVlLWNvbnRleHQuanNcIjtcblxuaW1wb3J0IHsgc2lnblVSTCwgdHJhbnNmb3JtT2JqZWN0S2V5cyB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xuXG5jb25zdCBodHRwQ2xpZW50ID0gSHR0cENsaWVudC5nZXRJbnN0YW5jZSgpO1xuXG5leHBvcnQgdHlwZSBCdWlsZFF1ZXJ5QXJnczxcbiAgVFJlcXVlc3RQYXJhbWV0ZXJTY2hlbWEgZXh0ZW5kcyB6LlpvZFJhd1NoYXBlLFxuICBUUmVzcG9uc2VTY2hlbWEgZXh0ZW5kcyB6LlpvZFJhd1NoYXBlLFxuICBUVHJhbnNmb3JtZWRSZXF1ZXN0UGFyYW1ldGVyU2NoZW1hIGV4dGVuZHMgei5ab2RSYXdTaGFwZVxuPiA9IHtcbiAgcGF0aDogc3RyaW5nO1xuICByZXF1ZXN0UGFyYW1ldGVyU2NoZW1hOiB6LlpvZE9iamVjdDxUUmVxdWVzdFBhcmFtZXRlclNjaGVtYT47XG4gIHJlc3BvbnNlU2NoZW1hOiB6LlpvZE9iamVjdDxUUmVzcG9uc2VTY2hlbWE+O1xuICB0cmFuc2Zvcm1SZXF1ZXN0UGFyYW1ldGVyU2NoZW1hPzogei5ab2RPYmplY3Q8VFRyYW5zZm9ybWVkUmVxdWVzdFBhcmFtZXRlclNjaGVtYT47XG4gIHRyYW5zZm9ybVJlcXVlc3RQYXJhbWV0ZXI/OiAoXG4gICAgZGF0YTogei5pbmZlcjx6LlpvZE9iamVjdDxUUmVxdWVzdFBhcmFtZXRlclNjaGVtYT4+XG4gICkgPT4gei5pbmZlcjx6LlpvZE9iamVjdDxUVHJhbnNmb3JtZWRSZXF1ZXN0UGFyYW1ldGVyU2NoZW1hPj47XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVUcmFuc2Zvcm08XG4gIFRSZXF1ZXN0UGFyYW1ldGVyU2NoZW1hIGV4dGVuZHMgei5ab2RSYXdTaGFwZSxcbiAgVFJlc3BvbnNlU2NoZW1hIGV4dGVuZHMgei5ab2RSYXdTaGFwZSxcbiAgVFRyYW5zZm9ybWVkUmVxdWVzdFBhcmFtZXRlclNjaGVtYSBleHRlbmRzIHouWm9kUmF3U2hhcGVcbj4oXG4gIGFyZ3M6IEJ1aWxkUXVlcnlBcmdzPFxuICAgIFRSZXF1ZXN0UGFyYW1ldGVyU2NoZW1hLFxuICAgIFRSZXNwb25zZVNjaGVtYSxcbiAgICBUVHJhbnNmb3JtZWRSZXF1ZXN0UGFyYW1ldGVyU2NoZW1hXG4gID5cbikge1xuICByZXR1cm4gYXN5bmMgZnVuY3Rpb24gdHJhbnNmb3JtUGFyc2VkUmVxdWVzdFBhcmFtZXRlcnMoXG4gICAgcGFyc2VkUmVxdWVzdFBhcmFtZXRlckRhdGE6IHouaW5mZXI8ei5ab2RPYmplY3Q8VFJlcXVlc3RQYXJhbWV0ZXJTY2hlbWE+PlxuICApIHtcbiAgICBpZiAoIWFyZ3MudHJhbnNmb3JtUmVxdWVzdFBhcmFtZXRlcikge1xuICAgICAgcmV0dXJuIHBhcnNlZFJlcXVlc3RQYXJhbWV0ZXJEYXRhO1xuICAgIH1cblxuICAgIGNvbnN0IGRhdGEgPSBhcmdzLnRyYW5zZm9ybVJlcXVlc3RQYXJhbWV0ZXIocGFyc2VkUmVxdWVzdFBhcmFtZXRlckRhdGEpO1xuXG4gICAgaWYgKCFhcmdzLnRyYW5zZm9ybVJlcXVlc3RQYXJhbWV0ZXJTY2hlbWEpIHtcbiAgICAgIHJldHVybiBwYXJzZWRSZXF1ZXN0UGFyYW1ldGVyRGF0YTtcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhcmdzLnRyYW5zZm9ybVJlcXVlc3RQYXJhbWV0ZXJTY2hlbWEuc2FmZVBhcnNlQXN5bmMoXG4gICAgICBkYXRhXG4gICAgKTtcblxuICAgIGlmICghcmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYHRyYW5zZm9ybSByZXF1ZXN0IHBhcmFtZXRlcnMgZXJyb3I6ICR7cmVzdWx0LmVycm9yLm1lc3NhZ2V9YFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0LmRhdGE7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZFF1ZXJ5PFxuICBUUmVxdWVzdFBhcmFtZXRlclNjaGVtYSBleHRlbmRzIHouWm9kUmF3U2hhcGUsXG4gIFRSZXNwb25zZVNjaGVtYSBleHRlbmRzIHouWm9kUmF3U2hhcGUsXG4gIFRUcmFuc2Zvcm1lZFJlcXVlc3RQYXJhbWV0ZXJTY2hlbWEgZXh0ZW5kcyB6LlpvZFJhd1NoYXBlXG4+KFxuICBhcmdzOiBCdWlsZFF1ZXJ5QXJnczxcbiAgICBUUmVxdWVzdFBhcmFtZXRlclNjaGVtYSxcbiAgICBUUmVzcG9uc2VTY2hlbWEsXG4gICAgVFRyYW5zZm9ybWVkUmVxdWVzdFBhcmFtZXRlclNjaGVtYVxuICA+XG4pIHtcbiAgY29uc3QgdHJhbnNmb3JtUGFyc2VkUmVxdWVzdFBhcmFtZXRlcnMgPSBjcmVhdGVUcmFuc2Zvcm0oYXJncyk7XG4gIHR5cGUgVFJlcXVlc3RQYXJhbWV0ZXJzID0gei5pbmZlcjx0eXBlb2YgYXJncy5yZXF1ZXN0UGFyYW1ldGVyU2NoZW1hPjtcblxuICByZXR1cm4gYXN5bmMgZnVuY3Rpb24gcXVlcnkocmVxdWVzdFBhcmFtZXRlcnM6IFRSZXF1ZXN0UGFyYW1ldGVycykge1xuICAgIGNvbnN0IHBhcnNlUmVxdWVzdFBhcmFtZXRlcnMgPVxuICAgICAgYXdhaXQgYXJncy5yZXF1ZXN0UGFyYW1ldGVyU2NoZW1hLnNhZmVQYXJzZUFzeW5jKHJlcXVlc3RQYXJhbWV0ZXJzKTtcblxuICAgIGlmICghcGFyc2VSZXF1ZXN0UGFyYW1ldGVycy5zdWNjZXNzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBwYXJzZSByZXF1ZXN0IHBhcmFtZXRlcnMgZXJyb3I6ICR7cGFyc2VSZXF1ZXN0UGFyYW1ldGVycy5lcnJvci5tZXNzYWdlfWBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgdHJhbnNmb3JtUmVxdWVzdFBhcmFtZXRlcnNEYXRhID1cbiAgICAgIGF3YWl0IHRyYW5zZm9ybVBhcnNlZFJlcXVlc3RQYXJhbWV0ZXJzKHBhcnNlUmVxdWVzdFBhcmFtZXRlcnMuZGF0YSk7XG5cbiAgICBjb25zdCBwYXJzZWRSZXF1ZXN0UGFyYW1ldGVycyA9IHRyYW5zZm9ybU9iamVjdEtleXMoXG4gICAgICB0cmFuc2Zvcm1SZXF1ZXN0UGFyYW1ldGVyc0RhdGEsXG4gICAgICAoa2V5KSA9PiBfc25ha2VDYXNlKGtleS50b1N0cmluZygpKVxuICAgICk7XG5cbiAgICBjb25zdCBjb250ZXh0SW5zdGFuY2UgPSBTaG9wZWVDb250ZXh0LmdldEluc3RhbmNlKCk7XG4gICAgY29uc3QgY29udGV4dCA9IGNvbnRleHRJbnN0YW5jZS52YWx1ZTtcblxuICAgIGh0dHBDbGllbnQuc2V0TG9nRW5hYmxlZChjb250ZXh0SW5zdGFuY2UuaXNMb2dFbmFibGVkKTtcblxuICAgIGNvbnN0IHNpZ25lZFVSTCA9IGF3YWl0IHNpZ25VUkwoe1xuICAgICAgLi4uY29udGV4dCxcbiAgICAgIHBhdGg6IGFyZ3MucGF0aCxcbiAgICAgIHBhcmFtczogcGFyc2VkUmVxdWVzdFBhcmFtZXRlcnMsXG4gICAgfSk7XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGh0dHBDbGllbnQuZ2V0KHNpZ25lZFVSTCk7XG4gICAgY29uc3QgZGF0YSA9IHRyYW5zZm9ybU9iamVjdEtleXMocmVzcG9uc2UuZGF0YSwgKGtleSkgPT5cbiAgICAgIF9jYW1lbENhc2Uoa2V5LnRvU3RyaW5nKCkpXG4gICAgKTtcblxuICAgIGNvbnN0IHBhcnNlRGF0YSA9IGF3YWl0IGFyZ3MucmVzcG9uc2VTY2hlbWEuc2FmZVBhcnNlQXN5bmMoZGF0YSk7XG5cbiAgICBpZiAoIXBhcnNlRGF0YS5zdWNjZXNzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHBhcnNlIHJlc3BvbnNlIGVycm9yOiAke3BhcnNlRGF0YS5lcnJvci5tZXNzYWdlfWApO1xuICAgIH1cblxuICAgIGNvbnN0IHBhcnNlZERhdGEgPSBwYXJzZURhdGEuZGF0YTtcblxuICAgIHJldHVybiBwYXJzZWREYXRhO1xuICB9O1xufVxuIl0sIm5hbWVzIjpbIl9zbmFrZUNhc2UiLCJfY2FtZWxDYXNlIiwiSHR0cENsaWVudCIsIlNob3BlZUNvbnRleHQiLCJzaWduVVJMIiwidHJhbnNmb3JtT2JqZWN0S2V5cyIsImh0dHBDbGllbnQiLCJnZXRJbnN0YW5jZSIsImNyZWF0ZVRyYW5zZm9ybSIsImFyZ3MiLCJ0cmFuc2Zvcm1QYXJzZWRSZXF1ZXN0UGFyYW1ldGVycyIsInBhcnNlZFJlcXVlc3RQYXJhbWV0ZXJEYXRhIiwidHJhbnNmb3JtUmVxdWVzdFBhcmFtZXRlciIsImRhdGEiLCJ0cmFuc2Zvcm1SZXF1ZXN0UGFyYW1ldGVyU2NoZW1hIiwicmVzdWx0Iiwic2FmZVBhcnNlQXN5bmMiLCJzdWNjZXNzIiwiRXJyb3IiLCJlcnJvciIsIm1lc3NhZ2UiLCJidWlsZFF1ZXJ5IiwicXVlcnkiLCJyZXF1ZXN0UGFyYW1ldGVycyIsInBhcnNlUmVxdWVzdFBhcmFtZXRlcnMiLCJyZXF1ZXN0UGFyYW1ldGVyU2NoZW1hIiwidHJhbnNmb3JtUmVxdWVzdFBhcmFtZXRlcnNEYXRhIiwicGFyc2VkUmVxdWVzdFBhcmFtZXRlcnMiLCJrZXkiLCJ0b1N0cmluZyIsImNvbnRleHRJbnN0YW5jZSIsImNvbnRleHQiLCJ2YWx1ZSIsInNldExvZ0VuYWJsZWQiLCJpc0xvZ0VuYWJsZWQiLCJzaWduZWRVUkwiLCJwYXRoIiwicGFyYW1zIiwicmVzcG9uc2UiLCJnZXQiLCJwYXJzZURhdGEiLCJyZXNwb25zZVNjaGVtYSIsInBhcnNlZERhdGEiXSwibWFwcGluZ3MiOiJBQUNBLE9BQU9BLGVBQWdCLGtCQUFtQixBQUMxQyxRQUFPQyxlQUFnQixrQkFBbUIsQUFFMUMsUUFBU0MsVUFBVSxLQUFRLGtCQUFtQixBQUM5QyxRQUFTQyxhQUFhLEtBQVEscUJBQXNCLEFBRXBELFFBQVNDLE9BQU8sQ0FBRUMsbUJBQW1CLEtBQVEsbUJBQW9CLENBRWpFLE1BQU1DLFdBQWFKLFdBQVdLLFdBQVcsR0FnQnpDLFNBQVNDLGdCQUtQQyxJQUlDLEVBRUQsT0FBTyxlQUFlQyxpQ0FDcEJDLDBCQUF5RSxFQUV6RSxHQUFJLENBQUNGLEtBQUtHLHlCQUF5QixDQUFFLENBQ25DLE9BQU9ELDBCQUNULENBRUEsTUFBTUUsS0FBT0osS0FBS0cseUJBQXlCLENBQUNELDRCQUU1QyxHQUFJLENBQUNGLEtBQUtLLCtCQUErQixDQUFFLENBQ3pDLE9BQU9ILDBCQUNULENBRUEsTUFBTUksT0FBUyxNQUFNTixLQUFLSywrQkFBK0IsQ0FBQ0UsY0FBYyxDQUN0RUgsTUFHRixHQUFJLENBQUNFLE9BQU9FLE9BQU8sQ0FBRSxDQUNuQixNQUFNLElBQUlDLE1BQ1IsQ0FBQyxvQ0FBb0MsRUFBRUgsT0FBT0ksS0FBSyxDQUFDQyxPQUFPLENBQUMsQ0FBQyxDQUVqRSxDQUVBLE9BQU9MLE9BQU9GLElBQUksQUFDcEIsQ0FDRixDQUVBLE9BQU8sU0FBU1EsV0FLZFosSUFJQyxFQUVELE1BQU1DLGlDQUFtQ0YsZ0JBQWdCQyxNQUd6RCxPQUFPLGVBQWVhLE1BQU1DLGlCQUFxQyxFQUMvRCxNQUFNQyx1QkFDSixNQUFNZixLQUFLZ0Isc0JBQXNCLENBQUNULGNBQWMsQ0FBQ08sbUJBRW5ELEdBQUksQ0FBQ0MsdUJBQXVCUCxPQUFPLENBQUUsQ0FDbkMsTUFBTSxJQUFJQyxNQUNSLENBQUMsZ0NBQWdDLEVBQUVNLHVCQUF1QkwsS0FBSyxDQUFDQyxPQUFPLENBQUMsQ0FBQyxDQUU3RSxDQUVBLE1BQU1NLCtCQUNKLE1BQU1oQixpQ0FBaUNjLHVCQUF1QlgsSUFBSSxFQUVwRSxNQUFNYyx3QkFBMEJ0QixvQkFDOUJxQiwrQkFDQSxBQUFDRSxLQUFRNUIsV0FBVzRCLElBQUlDLFFBQVEsS0FHbEMsTUFBTUMsZ0JBQWtCM0IsY0FBY0ksV0FBVyxHQUNqRCxNQUFNd0IsUUFBVUQsZ0JBQWdCRSxLQUFLLENBRXJDMUIsV0FBVzJCLGFBQWEsQ0FBQ0gsZ0JBQWdCSSxZQUFZLEVBRXJELE1BQU1DLFVBQVksTUFBTS9CLFFBQVEsQ0FDOUIsR0FBRzJCLE9BQU8sQ0FDVkssS0FBTTNCLEtBQUsyQixJQUFJLENBQ2ZDLE9BQVFWLHVCQUNWLEdBRUEsTUFBTVcsU0FBVyxNQUFNaEMsV0FBV2lDLEdBQUcsQ0FBQ0osV0FDdEMsTUFBTXRCLEtBQU9SLG9CQUFvQmlDLFNBQVN6QixJQUFJLENBQUUsQUFBQ2UsS0FDL0MzQixXQUFXMkIsSUFBSUMsUUFBUSxLQUd6QixNQUFNVyxVQUFZLE1BQU0vQixLQUFLZ0MsY0FBYyxDQUFDekIsY0FBYyxDQUFDSCxNQUUzRCxHQUFJLENBQUMyQixVQUFVdkIsT0FBTyxDQUFFLENBQ3RCLE1BQU0sSUFBSUMsTUFBTSxDQUFDLHNCQUFzQixFQUFFc0IsVUFBVXJCLEtBQUssQ0FBQ0MsT0FBTyxDQUFDLENBQUMsQ0FDcEUsQ0FFQSxNQUFNc0IsV0FBYUYsVUFBVTNCLElBQUksQ0FFakMsT0FBTzZCLFVBQ1QsQ0FDRiJ9