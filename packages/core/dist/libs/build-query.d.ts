import { z } from "zod";
export type BuildQueryArgs<TRequestParameterSchema extends z.ZodRawShape, TResponseSchema extends z.ZodRawShape, TTransformedRequestParameterSchema extends z.ZodRawShape> = {
    path: string;
    requestParameterSchema: z.ZodObject<TRequestParameterSchema>;
    responseSchema: z.ZodObject<TResponseSchema>;
    transformRequestParameterSchema?: z.ZodObject<TTransformedRequestParameterSchema>;
    transformRequestParameter?: (data: z.infer<z.ZodObject<TRequestParameterSchema>>) => z.infer<z.ZodObject<TTransformedRequestParameterSchema>>;
};
export declare function buildQuery<TRequestParameterSchema extends z.ZodRawShape, TResponseSchema extends z.ZodRawShape, TTransformedRequestParameterSchema extends z.ZodRawShape>(args: BuildQueryArgs<TRequestParameterSchema, TResponseSchema, TTransformedRequestParameterSchema>): (requestParameters: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<TRequestParameterSchema>, { [k_1 in keyof z.baseObjectOutputType<TRequestParameterSchema>]: undefined extends z.baseObjectOutputType<TRequestParameterSchema>[k_1] ? never : k_1; }[keyof TRequestParameterSchema]> extends infer T ? { [k in keyof T]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<TRequestParameterSchema>, { [k_1 in keyof z.baseObjectOutputType<TRequestParameterSchema>]: undefined extends z.baseObjectOutputType<TRequestParameterSchema>[k_1] ? never : k_1; }[keyof TRequestParameterSchema]>[k]; } : never) => Promise<z.objectUtil.addQuestionMarks<z.baseObjectOutputType<TResponseSchema>, { [k_3 in keyof z.baseObjectOutputType<TResponseSchema>]: undefined extends z.baseObjectOutputType<TResponseSchema>[k_3] ? never : k_3; }[keyof TResponseSchema]> extends infer T_1 ? { [k_2 in keyof T_1]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<TResponseSchema>, { [k_3 in keyof z.baseObjectOutputType<TResponseSchema>]: undefined extends z.baseObjectOutputType<TResponseSchema>[k_3] ? never : k_3; }[keyof TResponseSchema]>[k_2]; } : never>;
//# sourceMappingURL=build-query.d.ts.map